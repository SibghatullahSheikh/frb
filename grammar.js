module.exports = (function() {
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      function stringEscape(s) {
        function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

        return s
          .replace(/\\/g,   '\\\\')
          .replace(/"/g,    '\\"')
          .replace(/\x08/g, '\\b')
          .replace(/\t/g,   '\\t')
          .replace(/\n/g,   '\\n')
          .replace(/\f/g,   '\\f')
          .replace(/\r/g,   '\\r')
          .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
          .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
          .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
          .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
      }

      var expectedDesc, foundDesc;

      switch (expected.length) {
        case 0:
          expectedDesc = "end of input";
          break;

        case 1:
          expectedDesc = expected[0];
          break;

        default:
          expectedDesc = expected.slice(0, -1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }

      foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

      return "Expected " + expectedDesc + " but " + foundDesc + " found.";
    }

    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
    this.message  = buildMessage(expected, found);
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$startRuleFunctions = { expression: peg$parseexpression, sheet: peg$parsesheet },
        peg$startRuleFunction  = peg$parseexpression,

        peg$c0 = null,
        peg$c1 = [],
        peg$c2 = function(blocks) {
                return {type: "sheet", blocks: blocks};
            },
        peg$c3 = "@",
        peg$c4 = "\"@\"",
        peg$c5 = "",
        peg$c6 = "{",
        peg$c7 = "\"{\"",
        peg$c8 = "}",
        peg$c9 = "\"}\"",
        peg$c10 = function(name, annotation, statements) {
                return {
                    type: "block",
                    connection: annotation.connection,
                    module: annotation.module,
                    exports: annotation.exports,
                    label: name,
                    statements: statements
                };
            },
        peg$c11 = "<",
        peg$c12 = "\"<\"",
        peg$c13 = ":",
        peg$c14 = "\":\"",
        peg$c15 = function(connection, module, exports) {
                return {
                    connection: {"<": "prototype", ":": "object"}[connection],
                    module: module && module.value,
                    exports: exports !== "" ? exports[1] : undefined
                }
            },
        peg$c16 = function() {
                return {};
            },
        peg$c17 = ";",
        peg$c18 = "\";\"",
        peg$c19 = function(head, tail) {
                var result = [head];
                for (var i = 0; i < tail.length; i++) {
                    result.push(tail[i][2]);
                }
                return result;
            },
        peg$c20 = function(statement) {
                return [statement];
            },
        peg$c21 = function() {
                return [];
            },
        peg$c22 = "on",
        peg$c23 = "\"on\"",
        peg$c24 = "before",
        peg$c25 = "\"before\"",
        peg$c26 = " ",
        peg$c27 = "\" \"",
        peg$c28 = "->",
        peg$c29 = "\"->\"",
        peg$c30 = function(when, type, listener) {
                return {type: "event", when: when, event: type, listener: listener};
            },
        peg$c31 = "<->",
        peg$c32 = "\"<->\"",
        peg$c33 = "<-",
        peg$c34 = "\"<-\"",
        peg$c35 = function(target, arrow, source) {
                return {type: STATEMENTS[arrow], args: [
                    target,
                    source
                ]}
            },
        peg$c36 = "expression",
        peg$c37 = ",",
        peg$c38 = "\",\"",
        peg$c39 = "(",
        peg$c40 = "\"(\"",
        peg$c41 = ")",
        peg$c42 = "\")\"",
        peg$c43 = function(expressions) {
                return expressions;
            },
        peg$c44 = "?",
        peg$c45 = "\"?\"",
        peg$c46 = function(condition, tail) {
                if (tail) {
                    var consequent = tail[2];
                    var alternate = tail[6];
                    return {
                        type: "if",
                        args: [condition, consequent, alternate]
                    };
                } else {
                    return condition;
                }
            },
        peg$c47 = "||",
        peg$c48 = "\"||\"",
        peg$c49 = function(head, tail) {
                for (var i = 0; i < tail.length; i++) {
                    head = {
                        type: BINARY[tail[i][1]],
                        args: [
                            head,
                            tail[i][3]
                        ]
                    }
                }
                return head;
            },
        peg$c50 = "&&",
        peg$c51 = "\"&&\"",
        peg$c52 = "<=>",
        peg$c53 = "\"<=>\"",
        peg$c54 = "<=",
        peg$c55 = "\"<=\"",
        peg$c56 = ">=",
        peg$c57 = "\">=\"",
        peg$c58 = "-",
        peg$c59 = "\"-\"",
        peg$c60 = ">",
        peg$c61 = "\">\"",
        peg$c62 = "==",
        peg$c63 = "\"==\"",
        peg$c64 = "!=",
        peg$c65 = "\"!=\"",
        peg$c66 = function(left, tail) {
                if (!tail) {
                    return left;
                } else {
                    var operator = tail[1];
                    var right = tail[3];
                    if (operator === "!=") {
                        return {type: "not", args: [{type: "equals", args: [left, right]}]};
                    } else {
                        return {type: BINARY[operator], args: [left, right]};
                    }
                }
            },
        peg$c67 = "+",
        peg$c68 = "\"+\"",
        peg$c69 = "*",
        peg$c70 = "\"*\"",
        peg$c71 = "/",
        peg$c72 = "\"/\"",
        peg$c73 = "%",
        peg$c74 = "\"%\"",
        peg$c75 = "rem",
        peg$c76 = "\"rem\"",
        peg$c77 = "**",
        peg$c78 = "\"**\"",
        peg$c79 = "//",
        peg$c80 = "\"//\"",
        peg$c81 = "%%",
        peg$c82 = "\"%%\"",
        peg$c83 = "??",
        peg$c84 = "\"??\"",
        peg$c85 = "!",
        peg$c86 = "\"!\"",
        peg$c87 = "^",
        peg$c88 = "\"^\"",
        peg$c89 = function(operator, arg) {
                return {type: UNARY[operator], args: [arg]};
            },
        peg$c90 = function(head, tail) {
                for (var i = 0; i < tail.length; i++) {
                    head = tail[i](head);
                }
                return head;
            },
        peg$c91 = ".",
        peg$c92 = "\".\"",
        peg$c93 = function(tail) {
                return tail;
            },
        peg$c94 = "[",
        peg$c95 = "\"[\"",
        peg$c96 = "]",
        peg$c97 = "\"]\"",
        peg$c98 = function(arg) {
                return function (previous) {
                    return {
                        type: "property",
                        args: [
                            previous,
                            arg
                        ]
                    };
                };
            },
        peg$c99 = function(name, expression) {
                if (BLOCKS[name]) {
                    return function (previous) {
                        return {
                            type: BLOCKS[name],
                            args: [previous, expression]
                        };
                    }
                } else if (expression.type === "value") {
                    return function (previous) {
                        return {
                            type: name,
                            args: [previous]
                        };
                    };
                } else {
                    return function (previous) {
                        return {
                            type: name,
                            args: [
                                {type: "mapBlock", args: [
                                    previous,
                                    expression
                                ]}
                            ]
                        };
                    };
                }
            },
        peg$c100 = function(name, args) {
                return function (previous) {
                    return {
                        type: name,
                        args: [previous].concat(args)
                    };
                };
            },
        peg$c101 = function(index) {
                return function (previous) {
                    return {
                        type: "property",
                        args: [
                            previous,
                            {type: "literal", value: +index.join("")}
                        ]
                    };
                };
            },
        peg$c102 = function(name) {
                return function (previous) {
                    return {
                        type: "property",
                        args: [
                            previous,
                            {type: "literal", value: name}
                        ]
                    };
                };
            },
        peg$c103 = function(expression) {
                return function (previous) {
                    return {
                        type: "with",
                        args: [
                            previous,
                            expression
                        ]
                    };
                };
            },
        peg$c104 = "this",
        peg$c105 = "\"this\"",
        peg$c106 = function() { return {type: "value"}; },
        peg$c107 = "true",
        peg$c108 = "\"true\"",
        peg$c109 = function() { return {type: "literal", value: true}; },
        peg$c110 = "false",
        peg$c111 = "\"false\"",
        peg$c112 = function() { return {type: "literal", value: false}; },
        peg$c113 = "null",
        peg$c114 = "\"null\"",
        peg$c115 = function() { return {type: "literal", value: null}; },
        peg$c116 = function(name) {
                return {type: "component", label: name};
            },
        peg$c117 = "$",
        peg$c118 = "\"$\"",
        peg$c119 = function(name) {
                return {type: "property", args: [
                    {type: "parameters"},
                    {type: "literal", value: name}
                ]};
            },
        peg$c120 = function() {
                return {type: "parameters"};
            },
        peg$c121 = "#",
        peg$c122 = "\"#\"",
        peg$c123 = function(name) {
                return {type: "element", id: name};
            },
        peg$c124 = "&",
        peg$c125 = "\"&\"",
        peg$c126 = function(name, args) {
                return {type: name, args: args, inline: true};
            },
        peg$c127 = function(expression) {
                return expression;
            },
        peg$c128 = function(tail) {
                return tail({type: "value"});
            },
        peg$c129 = function() {
                return {type: "value"};
            },
        peg$c130 = "word",
        peg$c131 = /^[a-zA-Z_0-9\-]/,
        peg$c132 = "[a-zA-Z_0-9\\-]",
        peg$c133 = function(chars) {
                return chars.join("");
            },
        peg$c134 = "string",
        peg$c135 = "'",
        peg$c136 = "\"'\"",
        peg$c137 = function(chars) { return {type: "literal", value: chars.join("")}; },
        peg$c138 = "\"",
        peg$c139 = "\"\\\"\"",
        peg$c140 = /^[^'\\\0-\x1F]/,
        peg$c141 = "[^'\\\\\\0-\\x1F]",
        peg$c142 = "\\'",
        peg$c143 = "\"\\\\'\"",
        peg$c144 = function() { return "'";  },
        peg$c145 = /^[^"\\\0-\x1F]/,
        peg$c146 = "[^\"\\\\\\0-\\x1F]",
        peg$c147 = "\\\"",
        peg$c148 = "\"\\\\\\\"\"",
        peg$c149 = function() { return "\"";  },
        peg$c150 = "\\\\",
        peg$c151 = "\"\\\\\\\\\"",
        peg$c152 = function() { return "\\"; },
        peg$c153 = "\\/",
        peg$c154 = "\"\\\\/\"",
        peg$c155 = function() { return "/";  },
        peg$c156 = "\\b",
        peg$c157 = "\"\\\\b\"",
        peg$c158 = function() { return "\b"; },
        peg$c159 = "\\f",
        peg$c160 = "\"\\\\f\"",
        peg$c161 = function() { return "\f"; },
        peg$c162 = "\\n",
        peg$c163 = "\"\\\\n\"",
        peg$c164 = function() { return "\n"; },
        peg$c165 = "\\r",
        peg$c166 = "\"\\\\r\"",
        peg$c167 = function() { return "\r"; },
        peg$c168 = "\\t",
        peg$c169 = "\"\\\\t\"",
        peg$c170 = function() { return "\t"; },
        peg$c171 = "\\0",
        peg$c172 = "\"\\\\0\"",
        peg$c173 = function() { return "\0"; },
        peg$c174 = "\\u",
        peg$c175 = "\"\\\\u\"",
        peg$c176 = function(digits) {
                return String.fromCharCode(parseInt(digits, 16));
            },
        peg$c177 = /^[0-9a-fA-F]/,
        peg$c178 = "[0-9a-fA-F]",
        peg$c179 = function() {
                return {type: "tuple", args: []};
            },
        peg$c180 = function(expressions) {
                return {type: "tuple", args: expressions};
            },
        peg$c181 = function() { return {type: "record", args: []}; },
        peg$c182 = function(pairs) { return {type: "record", args: pairs}; },
        peg$c183 = function(head, tail) {
                var result = {};
                result[head[0]] = head[1];
                for (var i = 0; i < tail.length; i++) {
                    result[tail[i][2][0]] = tail[i][2][1];
                }
                return result;
            },
        peg$c184 = function(name, value) { return [name, value]; },
        peg$c185 = "number",
        peg$c186 = function(parts) {
                return {type: "literal", value: +parts}
            },
        peg$c187 = /^[eE]/,
        peg$c188 = "[eE]",
        peg$c189 = /^[+\-]/,
        peg$c190 = "[+\\-]",
        peg$c191 = /^[0-9]/,
        peg$c192 = "[0-9]",
        peg$c193 = /^[1-9]/,
        peg$c194 = "[1-9]",
        peg$c195 = /^[ \n]/,
        peg$c196 = "[ \\n]",

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$cleanupExpected(expected) {
      var i = 0;

      expected.sort();

      while (i < expected.length) {
        if (expected[i - 1] === expected[i]) {
          expected.splice(i, 1);
        } else {
          i++;
        }
      }
    }

    function peg$parsesheet() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parseblock();
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parseblock();
        }
        if (s2 !== null) {
          s3 = peg$parse_();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c2(s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseblock() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c3;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c4); }
      }
      if (s1 !== null) {
        s2 = peg$parseword();
        if (s2 !== null) {
          s3 = peg$parse_();
          if (s3 !== null) {
            s4 = peg$parseannotation();
            if (s4 === null) {
              s4 = peg$c5;
            }
            if (s4 !== null) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s5 = peg$c6;
                peg$currPos++;
              } else {
                s5 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c7); }
              }
              if (s5 !== null) {
                s6 = peg$parse_();
                if (s6 !== null) {
                  s7 = peg$parsestatements();
                  if (s7 !== null) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s8 = peg$c8;
                      peg$currPos++;
                    } else {
                      s8 = null;
                      if (peg$silentFails === 0) { peg$fail(peg$c9); }
                    }
                    if (s8 !== null) {
                      s9 = peg$parse_();
                      if (s9 !== null) {
                        peg$reportedPos = s0;
                        s1 = peg$c10(s2,s4,s7);
                        if (s1 === null) {
                          peg$currPos = s0;
                          s0 = s1;
                        } else {
                          s0 = s1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseannotation() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 === null) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s1 = peg$c13;
          peg$currPos++;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
      }
      if (s1 !== null) {
        s2 = peg$parse_();
        if (s2 !== null) {
          s3 = peg$parsestring();
          if (s3 === null) {
            s3 = peg$c5;
          }
          if (s3 !== null) {
            s4 = peg$parse_();
            if (s4 !== null) {
              s5 = peg$currPos;
              s6 = peg$currPos;
              peg$silentFails++;
              if (input.charCodeAt(peg$currPos) === 123) {
                s7 = peg$c6;
                peg$currPos++;
              } else {
                s7 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c7); }
              }
              peg$silentFails--;
              if (s7 === null) {
                s6 = peg$c5;
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
              if (s6 !== null) {
                s7 = peg$parseexpression();
                if (s7 !== null) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === null) {
                s5 = peg$c5;
              }
              if (s5 !== null) {
                s6 = peg$parse_();
                if (s6 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c15(s1,s3,s5);
                  if (s1 === null) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c16();
        }
        if (s1 === null) {
          peg$currPos = s0;
          s0 = s1;
        } else {
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parsestatements() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsestatement();
      if (s1 !== null) {
        s2 = peg$parse_();
        if (s2 !== null) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 59) {
            s5 = peg$c17;
            peg$currPos++;
          } else {
            s5 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c18); }
          }
          if (s5 !== null) {
            s6 = peg$parse_();
            if (s6 !== null) {
              s7 = peg$parsestatement();
              if (s7 !== null) {
                s8 = peg$parse_();
                if (s8 !== null) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== null) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 59) {
              s5 = peg$c17;
              peg$currPos++;
            } else {
              s5 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c18); }
            }
            if (s5 !== null) {
              s6 = peg$parse_();
              if (s6 !== null) {
                s7 = peg$parsestatement();
                if (s7 !== null) {
                  s8 = peg$parse_();
                  if (s8 !== null) {
                    s5 = [s5, s6, s7, s8];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== null) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s4 = peg$c17;
              peg$currPos++;
            } else {
              s4 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c18); }
            }
            if (s4 === null) {
              s4 = peg$c5;
            }
            if (s4 !== null) {
              s5 = peg$parse_();
              if (s5 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c19(s1,s3);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        s1 = peg$parsestatement();
        if (s1 !== null) {
          s2 = peg$parse_();
          if (s2 !== null) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s3 = peg$c17;
              peg$currPos++;
            } else {
              s3 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c18); }
            }
            if (s3 === null) {
              s3 = peg$c5;
            }
            if (s3 !== null) {
              s4 = peg$parse_();
              if (s4 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c20(s1);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === null) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c21();
          }
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parsestatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c22) {
        s1 = peg$c22;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }
      if (s1 === null) {
        if (input.substr(peg$currPos, 6) === peg$c24) {
          s1 = peg$c24;
          peg$currPos += 6;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c25); }
        }
      }
      if (s1 !== null) {
        if (input.charCodeAt(peg$currPos) === 32) {
          s2 = peg$c26;
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c27); }
        }
        if (s2 !== null) {
          s3 = peg$parse_();
          if (s3 !== null) {
            s4 = peg$parseword();
            if (s4 !== null) {
              s5 = peg$parse_();
              if (s5 !== null) {
                if (input.substr(peg$currPos, 2) === peg$c28) {
                  s6 = peg$c28;
                  peg$currPos += 2;
                } else {
                  s6 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c29); }
                }
                if (s6 !== null) {
                  s7 = peg$parse_();
                  if (s7 !== null) {
                    s8 = peg$parseexpression();
                    if (s8 !== null) {
                      s9 = peg$parse_();
                      if (s9 !== null) {
                        peg$reportedPos = s0;
                        s1 = peg$c30(s1,s4,s8);
                        if (s1 === null) {
                          peg$currPos = s0;
                          s0 = s1;
                        } else {
                          s0 = s1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        s1 = peg$parseexpression();
        if (s1 !== null) {
          s2 = peg$parse_();
          if (s2 !== null) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s3 = peg$c13;
              peg$currPos++;
            } else {
              s3 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s3 === null) {
              if (input.substr(peg$currPos, 3) === peg$c31) {
                s3 = peg$c31;
                peg$currPos += 3;
              } else {
                s3 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c32); }
              }
              if (s3 === null) {
                if (input.substr(peg$currPos, 2) === peg$c33) {
                  s3 = peg$c33;
                  peg$currPos += 2;
                } else {
                  s3 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c34); }
                }
              }
            }
            if (s3 !== null) {
              s4 = peg$parse_();
              if (s4 !== null) {
                s5 = peg$parseexpression();
                if (s5 !== null) {
                  s6 = peg$parse_();
                  if (s6 !== null) {
                    peg$reportedPos = s0;
                    s1 = peg$c35(s1,s3,s5);
                    if (s1 === null) {
                      peg$currPos = s0;
                      s0 = s1;
                    } else {
                      s0 = s1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseexpression() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parseif();
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c36); }
      }

      return s0;
    }

    function peg$parseexpressions() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseexpression();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c37;
          peg$currPos++;
        } else {
          s4 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c38); }
        }
        if (s4 !== null) {
          s5 = peg$parse_();
          if (s5 !== null) {
            s6 = peg$parseexpression();
            if (s6 !== null) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c37;
            peg$currPos++;
          } else {
            s4 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c38); }
          }
          if (s4 !== null) {
            s5 = peg$parse_();
            if (s5 !== null) {
              s6 = peg$parseexpression();
              if (s6 !== null) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c19(s1,s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseargs() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c39;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }
      if (s1 !== null) {
        s2 = peg$parse_();
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c41;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c42); }
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c21();
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c39;
          peg$currPos++;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c40); }
        }
        if (s1 !== null) {
          s2 = peg$parseexpressions();
          if (s2 !== null) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s3 = peg$c41;
              peg$currPos++;
            } else {
              s3 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c42); }
            }
            if (s3 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c43(s2);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseif() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseor();
      if (s1 !== null) {
        s2 = peg$parse_();
        if (s2 !== null) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 63) {
            s4 = peg$c44;
            peg$currPos++;
          } else {
            s4 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c45); }
          }
          if (s4 !== null) {
            s5 = peg$parse_();
            if (s5 !== null) {
              s6 = peg$parseexpression();
              if (s6 !== null) {
                s7 = peg$parse_();
                if (s7 !== null) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s8 = peg$c13;
                    peg$currPos++;
                  } else {
                    s8 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c14); }
                  }
                  if (s8 !== null) {
                    s9 = peg$parse_();
                    if (s9 !== null) {
                      s10 = peg$parseexpression();
                      if (s10 !== null) {
                        s4 = [s4, s5, s6, s7, s8, s9, s10];
                        s3 = s4;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === null) {
            s3 = peg$c5;
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c46(s1,s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseor() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseand();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== null) {
          if (input.substr(peg$currPos, 2) === peg$c47) {
            s5 = peg$c47;
            peg$currPos += 2;
          } else {
            s5 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c48); }
          }
          if (s5 !== null) {
            s6 = peg$parse_();
            if (s6 !== null) {
              s7 = peg$parseand();
              if (s7 !== null) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== null) {
            if (input.substr(peg$currPos, 2) === peg$c47) {
              s5 = peg$c47;
              peg$currPos += 2;
            } else {
              s5 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c48); }
            }
            if (s5 !== null) {
              s6 = peg$parse_();
              if (s6 !== null) {
                s7 = peg$parseand();
                if (s7 !== null) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c49(s1,s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseand() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsecomparison();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== null) {
          if (input.substr(peg$currPos, 2) === peg$c50) {
            s5 = peg$c50;
            peg$currPos += 2;
          } else {
            s5 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c51); }
          }
          if (s5 !== null) {
            s6 = peg$parse_();
            if (s6 !== null) {
              s7 = peg$parsecomparison();
              if (s7 !== null) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== null) {
            if (input.substr(peg$currPos, 2) === peg$c50) {
              s5 = peg$c50;
              peg$currPos += 2;
            } else {
              s5 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c51); }
            }
            if (s5 !== null) {
              s6 = peg$parse_();
              if (s6 !== null) {
                s7 = peg$parsecomparison();
                if (s7 !== null) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c49(s1,s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecomparison() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsearithmetic();
      if (s1 !== null) {
        s2 = peg$currPos;
        s3 = peg$parse_();
        if (s3 !== null) {
          s4 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c52) {
            s5 = peg$c52;
            peg$currPos += 3;
          } else {
            s5 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c53); }
          }
          if (s5 === null) {
            if (input.substr(peg$currPos, 2) === peg$c54) {
              s5 = peg$c54;
              peg$currPos += 2;
            } else {
              s5 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c55); }
            }
            if (s5 === null) {
              if (input.substr(peg$currPos, 2) === peg$c56) {
                s5 = peg$c56;
                peg$currPos += 2;
              } else {
                s5 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c57); }
              }
              if (s5 === null) {
                s5 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 60) {
                  s6 = peg$c11;
                  peg$currPos++;
                } else {
                  s6 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c12); }
                }
                if (s6 !== null) {
                  s7 = peg$currPos;
                  peg$silentFails++;
                  if (input.charCodeAt(peg$currPos) === 45) {
                    s8 = peg$c58;
                    peg$currPos++;
                  } else {
                    s8 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c59); }
                  }
                  peg$silentFails--;
                  if (s8 === null) {
                    s7 = peg$c5;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                  if (s7 !== null) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
                if (s5 === null) {
                  if (input.charCodeAt(peg$currPos) === 62) {
                    s5 = peg$c60;
                    peg$currPos++;
                  } else {
                    s5 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c61); }
                  }
                  if (s5 === null) {
                    if (input.substr(peg$currPos, 2) === peg$c62) {
                      s5 = peg$c62;
                      peg$currPos += 2;
                    } else {
                      s5 = null;
                      if (peg$silentFails === 0) { peg$fail(peg$c63); }
                    }
                    if (s5 === null) {
                      if (input.substr(peg$currPos, 2) === peg$c64) {
                        s5 = peg$c64;
                        peg$currPos += 2;
                      } else {
                        s5 = null;
                        if (peg$silentFails === 0) { peg$fail(peg$c65); }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s5 !== null) {
            s5 = input.substring(s4, peg$currPos);
          }
          s4 = s5;
          if (s4 !== null) {
            s5 = peg$parse_();
            if (s5 !== null) {
              s6 = peg$parsearithmetic();
              if (s6 !== null) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === null) {
          s2 = peg$c5;
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c66(s1,s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsearithmetic() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsemultiplicative();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== null) {
          s5 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 43) {
            s6 = peg$c67;
            peg$currPos++;
          } else {
            s6 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c68); }
          }
          if (s6 === null) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s6 = peg$c58;
              peg$currPos++;
            } else {
              s6 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c59); }
            }
          }
          if (s6 !== null) {
            s6 = input.substring(s5, peg$currPos);
          }
          s5 = s6;
          if (s5 !== null) {
            s6 = peg$parse_();
            if (s6 !== null) {
              s7 = peg$parsemultiplicative();
              if (s7 !== null) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== null) {
            s5 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 43) {
              s6 = peg$c67;
              peg$currPos++;
            } else {
              s6 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c68); }
            }
            if (s6 === null) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s6 = peg$c58;
                peg$currPos++;
              } else {
                s6 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c59); }
              }
            }
            if (s6 !== null) {
              s6 = input.substring(s5, peg$currPos);
            }
            s5 = s6;
            if (s5 !== null) {
              s6 = peg$parse_();
              if (s6 !== null) {
                s7 = peg$parsemultiplicative();
                if (s7 !== null) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c49(s1,s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsemultiplicative() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseexponential();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== null) {
          s5 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 42) {
            s6 = peg$c69;
            peg$currPos++;
          } else {
            s6 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c70); }
          }
          if (s6 === null) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s6 = peg$c71;
              peg$currPos++;
            } else {
              s6 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c72); }
            }
            if (s6 === null) {
              if (input.charCodeAt(peg$currPos) === 37) {
                s6 = peg$c73;
                peg$currPos++;
              } else {
                s6 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c74); }
              }
              if (s6 === null) {
                if (input.substr(peg$currPos, 3) === peg$c75) {
                  s6 = peg$c75;
                  peg$currPos += 3;
                } else {
                  s6 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c76); }
                }
              }
            }
          }
          if (s6 !== null) {
            s6 = input.substring(s5, peg$currPos);
          }
          s5 = s6;
          if (s5 !== null) {
            s6 = peg$parse_();
            if (s6 !== null) {
              s7 = peg$parseexponential();
              if (s7 !== null) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== null) {
            s5 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 42) {
              s6 = peg$c69;
              peg$currPos++;
            } else {
              s6 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c70); }
            }
            if (s6 === null) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s6 = peg$c71;
                peg$currPos++;
              } else {
                s6 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c72); }
              }
              if (s6 === null) {
                if (input.charCodeAt(peg$currPos) === 37) {
                  s6 = peg$c73;
                  peg$currPos++;
                } else {
                  s6 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c74); }
                }
                if (s6 === null) {
                  if (input.substr(peg$currPos, 3) === peg$c75) {
                    s6 = peg$c75;
                    peg$currPos += 3;
                  } else {
                    s6 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c76); }
                  }
                }
              }
            }
            if (s6 !== null) {
              s6 = input.substring(s5, peg$currPos);
            }
            s5 = s6;
            if (s5 !== null) {
              s6 = peg$parse_();
              if (s6 !== null) {
                s7 = peg$parseexponential();
                if (s7 !== null) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c49(s1,s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexponential() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsedefault();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== null) {
          s5 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c77) {
            s6 = peg$c77;
            peg$currPos += 2;
          } else {
            s6 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c78); }
          }
          if (s6 === null) {
            if (input.substr(peg$currPos, 2) === peg$c79) {
              s6 = peg$c79;
              peg$currPos += 2;
            } else {
              s6 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c80); }
            }
            if (s6 === null) {
              if (input.substr(peg$currPos, 2) === peg$c81) {
                s6 = peg$c81;
                peg$currPos += 2;
              } else {
                s6 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c82); }
              }
            }
          }
          if (s6 !== null) {
            s6 = input.substring(s5, peg$currPos);
          }
          s5 = s6;
          if (s5 !== null) {
            s6 = peg$parse_();
            if (s6 !== null) {
              s7 = peg$parsedefault();
              if (s7 !== null) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== null) {
            s5 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c77) {
              s6 = peg$c77;
              peg$currPos += 2;
            } else {
              s6 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c78); }
            }
            if (s6 === null) {
              if (input.substr(peg$currPos, 2) === peg$c79) {
                s6 = peg$c79;
                peg$currPos += 2;
              } else {
                s6 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c80); }
              }
              if (s6 === null) {
                if (input.substr(peg$currPos, 2) === peg$c81) {
                  s6 = peg$c81;
                  peg$currPos += 2;
                } else {
                  s6 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c82); }
                }
              }
            }
            if (s6 !== null) {
              s6 = input.substring(s5, peg$currPos);
            }
            s5 = s6;
            if (s5 !== null) {
              s6 = peg$parse_();
              if (s6 !== null) {
                s7 = peg$parsedefault();
                if (s7 !== null) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c49(s1,s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedefault() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseunary();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== null) {
          if (input.substr(peg$currPos, 2) === peg$c83) {
            s5 = peg$c83;
            peg$currPos += 2;
          } else {
            s5 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c84); }
          }
          if (s5 !== null) {
            s6 = peg$parse_();
            if (s6 !== null) {
              s7 = peg$parseunary();
              if (s7 !== null) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== null) {
            if (input.substr(peg$currPos, 2) === peg$c83) {
              s5 = peg$c83;
              peg$currPos += 2;
            } else {
              s5 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c84); }
            }
            if (s5 !== null) {
              s6 = peg$parse_();
              if (s6 !== null) {
                s7 = peg$parseunary();
                if (s7 !== null) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c49(s1,s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseunary() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 33) {
        s2 = peg$c85;
        peg$currPos++;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c86); }
      }
      if (s2 === null) {
        if (input.charCodeAt(peg$currPos) === 43) {
          s2 = peg$c67;
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c68); }
        }
        if (s2 === null) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s2 = peg$c58;
            peg$currPos++;
          } else {
            s2 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c59); }
          }
          if (s2 === null) {
            if (input.charCodeAt(peg$currPos) === 94) {
              s2 = peg$c87;
              peg$currPos++;
            } else {
              s2 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c88); }
            }
          }
        }
      }
      if (s2 !== null) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== null) {
        s2 = peg$parseunary();
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c89(s1,s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$parsepipe();
      }

      return s0;
    }

    function peg$parsepipe() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsevalue();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parsechain();
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parsechain();
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c90(s1,s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsechain() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c91;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c92); }
      }
      if (s1 !== null) {
        s2 = peg$parsetail();
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c93(s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c94;
          peg$currPos++;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c95); }
        }
        if (s1 !== null) {
          s2 = peg$parseexpression();
          if (s2 !== null) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s3 = peg$c96;
              peg$currPos++;
            } else {
              s3 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c97); }
            }
            if (s3 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c98(s2);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsetail() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseword();
      if (s1 !== null) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s2 = peg$c6;
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s2 !== null) {
          s3 = peg$parseexpression();
          if (s3 !== null) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s4 = peg$c8;
              peg$currPos++;
            } else {
              s4 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c9); }
            }
            if (s4 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c99(s1,s3);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        s1 = peg$parseword();
        if (s1 !== null) {
          s2 = peg$parseargs();
          if (s2 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c100(s1,s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === null) {
          s0 = peg$currPos;
          s1 = peg$parsedigits();
          if (s1 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c101(s1);
          }
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
          if (s0 === null) {
            s0 = peg$currPos;
            s1 = peg$parseword();
            if (s1 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c102(s1);
            }
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
            if (s0 === null) {
              s0 = peg$currPos;
              s1 = peg$parsearray();
              if (s1 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c103(s1);
              }
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
              if (s0 === null) {
                s0 = peg$currPos;
                s1 = peg$parseobject();
                if (s1 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c103(s1);
                }
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
                if (s0 === null) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 40) {
                    s1 = peg$c39;
                    peg$currPos++;
                  } else {
                    s1 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c40); }
                  }
                  if (s1 !== null) {
                    s2 = peg$parseexpression();
                    if (s2 !== null) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s3 = peg$c41;
                        peg$currPos++;
                      } else {
                        s3 = null;
                        if (peg$silentFails === 0) { peg$fail(peg$c42); }
                      }
                      if (s3 !== null) {
                        peg$reportedPos = s0;
                        s1 = peg$c103(s2);
                        if (s1 === null) {
                          peg$currPos = s0;
                          s0 = s1;
                        } else {
                          s0 = s1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsevalue() {
      var s0, s1, s2, s3;

      s0 = peg$parsearray();
      if (s0 === null) {
        s0 = peg$parseobject();
        if (s0 === null) {
          s0 = peg$parsestring();
          if (s0 === null) {
            s0 = peg$parsenumber();
            if (s0 === null) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 4) === peg$c104) {
                s1 = peg$c104;
                peg$currPos += 4;
              } else {
                s1 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c105); }
              }
              if (s1 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c106();
              }
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
              if (s0 === null) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 4) === peg$c107) {
                  s1 = peg$c107;
                  peg$currPos += 4;
                } else {
                  s1 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c108); }
                }
                if (s1 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c109();
                }
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
                if (s0 === null) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 5) === peg$c110) {
                    s1 = peg$c110;
                    peg$currPos += 5;
                  } else {
                    s1 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c111); }
                  }
                  if (s1 !== null) {
                    peg$reportedPos = s0;
                    s1 = peg$c112();
                  }
                  if (s1 === null) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                  if (s0 === null) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 4) === peg$c113) {
                      s1 = peg$c113;
                      peg$currPos += 4;
                    } else {
                      s1 = null;
                      if (peg$silentFails === 0) { peg$fail(peg$c114); }
                    }
                    if (s1 !== null) {
                      peg$reportedPos = s0;
                      s1 = peg$c115();
                    }
                    if (s1 === null) {
                      peg$currPos = s0;
                      s0 = s1;
                    } else {
                      s0 = s1;
                    }
                    if (s0 === null) {
                      s0 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 64) {
                        s1 = peg$c3;
                        peg$currPos++;
                      } else {
                        s1 = null;
                        if (peg$silentFails === 0) { peg$fail(peg$c4); }
                      }
                      if (s1 !== null) {
                        s2 = peg$parseword();
                        if (s2 !== null) {
                          peg$reportedPos = s0;
                          s1 = peg$c116(s2);
                          if (s1 === null) {
                            peg$currPos = s0;
                            s0 = s1;
                          } else {
                            s0 = s1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === null) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 36) {
                          s1 = peg$c117;
                          peg$currPos++;
                        } else {
                          s1 = null;
                          if (peg$silentFails === 0) { peg$fail(peg$c118); }
                        }
                        if (s1 !== null) {
                          s2 = peg$parseword();
                          if (s2 !== null) {
                            peg$reportedPos = s0;
                            s1 = peg$c119(s2);
                            if (s1 === null) {
                              peg$currPos = s0;
                              s0 = s1;
                            } else {
                              s0 = s1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === null) {
                          s0 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 36) {
                            s1 = peg$c117;
                            peg$currPos++;
                          } else {
                            s1 = null;
                            if (peg$silentFails === 0) { peg$fail(peg$c118); }
                          }
                          if (s1 !== null) {
                            peg$reportedPos = s0;
                            s1 = peg$c120();
                          }
                          if (s1 === null) {
                            peg$currPos = s0;
                            s0 = s1;
                          } else {
                            s0 = s1;
                          }
                          if (s0 === null) {
                            s0 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 35) {
                              s1 = peg$c121;
                              peg$currPos++;
                            } else {
                              s1 = null;
                              if (peg$silentFails === 0) { peg$fail(peg$c122); }
                            }
                            if (s1 !== null) {
                              s2 = peg$parseword();
                              if (s2 !== null) {
                                peg$reportedPos = s0;
                                s1 = peg$c123(s2);
                                if (s1 === null) {
                                  peg$currPos = s0;
                                  s0 = s1;
                                } else {
                                  s0 = s1;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === null) {
                              s0 = peg$currPos;
                              if (input.charCodeAt(peg$currPos) === 38) {
                                s1 = peg$c124;
                                peg$currPos++;
                              } else {
                                s1 = null;
                                if (peg$silentFails === 0) { peg$fail(peg$c125); }
                              }
                              if (s1 !== null) {
                                s2 = peg$parseword();
                                if (s2 !== null) {
                                  s3 = peg$parseargs();
                                  if (s3 !== null) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c126(s2,s3);
                                    if (s1 === null) {
                                      peg$currPos = s0;
                                      s0 = s1;
                                    } else {
                                      s0 = s1;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                              if (s0 === null) {
                                s0 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 40) {
                                  s1 = peg$c39;
                                  peg$currPos++;
                                } else {
                                  s1 = null;
                                  if (peg$silentFails === 0) { peg$fail(peg$c40); }
                                }
                                if (s1 !== null) {
                                  s2 = peg$parseexpression();
                                  if (s2 !== null) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                      s3 = peg$c41;
                                      peg$currPos++;
                                    } else {
                                      s3 = null;
                                      if (peg$silentFails === 0) { peg$fail(peg$c42); }
                                    }
                                    if (s3 !== null) {
                                      peg$reportedPos = s0;
                                      s1 = peg$c127(s2);
                                      if (s1 === null) {
                                        peg$currPos = s0;
                                        s0 = s1;
                                      } else {
                                        s0 = s1;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                                if (s0 === null) {
                                  s0 = peg$currPos;
                                  s1 = peg$parsetail();
                                  if (s1 !== null) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c128(s1);
                                  }
                                  if (s1 === null) {
                                    peg$currPos = s0;
                                    s0 = s1;
                                  } else {
                                    s0 = s1;
                                  }
                                  if (s0 === null) {
                                    s0 = peg$currPos;
                                    s1 = [];
                                    if (s1 !== null) {
                                      peg$reportedPos = s0;
                                      s1 = peg$c129();
                                    }
                                    if (s1 === null) {
                                      peg$currPos = s0;
                                      s0 = s1;
                                    } else {
                                      s0 = s1;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseword() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c131.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c132); }
      }
      if (s2 !== null) {
        while (s2 !== null) {
          s1.push(s2);
          if (peg$c131.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c132); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c133(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c130); }
      }

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c135;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c136); }
      }
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parsetickedChar();
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parsetickedChar();
        }
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c135;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c136); }
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c137(s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s1 = peg$c138;
          peg$currPos++;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c139); }
        }
        if (s1 !== null) {
          s2 = [];
          s3 = peg$parsequotedChar();
          while (s3 !== null) {
            s2.push(s3);
            s3 = peg$parsequotedChar();
          }
          if (s2 !== null) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c138;
              peg$currPos++;
            } else {
              s3 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c139); }
            }
            if (s3 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c137(s2);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c134); }
      }

      return s0;
    }

    function peg$parsetickedChar() {
      var s0, s1;

      if (peg$c140.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c141); }
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c142) {
          s1 = peg$c142;
          peg$currPos += 2;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c143); }
        }
        if (s1 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c144();
        }
        if (s1 === null) {
          peg$currPos = s0;
          s0 = s1;
        } else {
          s0 = s1;
        }
        if (s0 === null) {
          s0 = peg$parseescape();
        }
      }

      return s0;
    }

    function peg$parsequotedChar() {
      var s0, s1;

      if (peg$c145.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c146); }
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c147) {
          s1 = peg$c147;
          peg$currPos += 2;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c148); }
        }
        if (s1 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c149();
        }
        if (s1 === null) {
          peg$currPos = s0;
          s0 = s1;
        } else {
          s0 = s1;
        }
        if (s0 === null) {
          s0 = peg$parseescape();
        }
      }

      return s0;
    }

    function peg$parseescape() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c150) {
        s1 = peg$c150;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c151); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c152();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c153) {
          s1 = peg$c153;
          peg$currPos += 2;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c154); }
        }
        if (s1 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c155();
        }
        if (s1 === null) {
          peg$currPos = s0;
          s0 = s1;
        } else {
          s0 = s1;
        }
        if (s0 === null) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c156) {
            s1 = peg$c156;
            peg$currPos += 2;
          } else {
            s1 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c157); }
          }
          if (s1 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c158();
          }
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
          if (s0 === null) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c159) {
              s1 = peg$c159;
              peg$currPos += 2;
            } else {
              s1 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c160); }
            }
            if (s1 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c161();
            }
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
            if (s0 === null) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c162) {
                s1 = peg$c162;
                peg$currPos += 2;
              } else {
                s1 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c163); }
              }
              if (s1 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c164();
              }
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
              if (s0 === null) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c165) {
                  s1 = peg$c165;
                  peg$currPos += 2;
                } else {
                  s1 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c166); }
                }
                if (s1 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c167();
                }
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
                if (s0 === null) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c168) {
                    s1 = peg$c168;
                    peg$currPos += 2;
                  } else {
                    s1 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c169); }
                  }
                  if (s1 !== null) {
                    peg$reportedPos = s0;
                    s1 = peg$c170();
                  }
                  if (s1 === null) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                  if (s0 === null) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c171) {
                      s1 = peg$c171;
                      peg$currPos += 2;
                    } else {
                      s1 = null;
                      if (peg$silentFails === 0) { peg$fail(peg$c172); }
                    }
                    if (s1 !== null) {
                      peg$reportedPos = s0;
                      s1 = peg$c173();
                    }
                    if (s1 === null) {
                      peg$currPos = s0;
                      s0 = s1;
                    } else {
                      s0 = s1;
                    }
                    if (s0 === null) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 2) === peg$c174) {
                        s1 = peg$c174;
                        peg$currPos += 2;
                      } else {
                        s1 = null;
                        if (peg$silentFails === 0) { peg$fail(peg$c175); }
                      }
                      if (s1 !== null) {
                        s2 = peg$currPos;
                        s3 = peg$currPos;
                        s4 = peg$parsehexDigit();
                        if (s4 !== null) {
                          s5 = peg$parsehexDigit();
                          if (s5 !== null) {
                            s6 = peg$parsehexDigit();
                            if (s6 !== null) {
                              s7 = peg$parsehexDigit();
                              if (s7 !== null) {
                                s4 = [s4, s5, s6, s7];
                                s3 = s4;
                              } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                              }
                            } else {
                              peg$currPos = s3;
                              s3 = peg$c0;
                            }
                          } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                          }
                        } else {
                          peg$currPos = s3;
                          s3 = peg$c0;
                        }
                        if (s3 !== null) {
                          s3 = input.substring(s2, peg$currPos);
                        }
                        s2 = s3;
                        if (s2 !== null) {
                          peg$reportedPos = s0;
                          s1 = peg$c176(s2);
                          if (s1 === null) {
                            peg$currPos = s0;
                            s0 = s1;
                          } else {
                            s0 = s1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsehexDigit() {
      var s0;

      if (peg$c177.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c178); }
      }

      return s0;
    }

    function peg$parsearray() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c94;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c95); }
      }
      if (s1 !== null) {
        s2 = peg$parse_();
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c96;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c97); }
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c179();
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c94;
          peg$currPos++;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c95); }
        }
        if (s1 !== null) {
          s2 = peg$parseexpressions();
          if (s2 !== null) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s3 = peg$c96;
              peg$currPos++;
            } else {
              s3 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c97); }
            }
            if (s3 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c180(s2);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseobject() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c6;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s1 !== null) {
        s2 = peg$parse_();
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c8;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c9); }
          }
          if (s3 !== null) {
            s4 = peg$parse_();
            if (s4 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c181();
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c6;
          peg$currPos++;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s1 !== null) {
          s2 = peg$parse_();
          if (s2 !== null) {
            s3 = peg$parsepairs();
            if (s3 !== null) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c8;
                peg$currPos++;
              } else {
                s4 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c9); }
              }
              if (s4 !== null) {
                s5 = peg$parse_();
                if (s5 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c182(s3);
                  if (s1 === null) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsepairs() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsepair();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c37;
          peg$currPos++;
        } else {
          s4 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c38); }
        }
        if (s4 !== null) {
          s5 = peg$parse_();
          if (s5 !== null) {
            s6 = peg$parsepair();
            if (s6 !== null) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c37;
            peg$currPos++;
          } else {
            s4 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c38); }
          }
          if (s4 !== null) {
            s5 = peg$parse_();
            if (s5 !== null) {
              s6 = peg$parsepair();
              if (s6 !== null) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c183(s1,s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepair() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseword();
      if (s1 !== null) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c13;
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
        if (s2 !== null) {
          s3 = peg$parse_();
          if (s3 !== null) {
            s4 = peg$parseexpression();
            if (s4 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c184(s1,s4);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsenumberPattern();
      if (s2 !== null) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c186(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c185); }
      }

      return s0;
    }

    function peg$parsenumberPattern() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseint();
      if (s1 !== null) {
        s2 = peg$parsefrac();
        if (s2 !== null) {
          s3 = peg$parseexp();
          if (s3 !== null) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        s1 = peg$parseint();
        if (s1 !== null) {
          s2 = peg$parsefrac();
          if (s2 !== null) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === null) {
          s0 = peg$currPos;
          s1 = peg$parseint();
          if (s1 !== null) {
            s2 = peg$parseexp();
            if (s2 !== null) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === null) {
            s0 = peg$parseint();
          }
        }
      }

      return s0;
    }

    function peg$parseint() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsedigit19();
      if (s1 !== null) {
        s2 = peg$parsedigits();
        if (s2 !== null) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$parsedigit();
        if (s0 === null) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 45) {
            s1 = peg$c58;
            peg$currPos++;
          } else {
            s1 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c59); }
          }
          if (s1 !== null) {
            s2 = peg$parsedigit19();
            if (s2 !== null) {
              s3 = peg$parsedigits();
              if (s3 !== null) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === null) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
              s1 = peg$c58;
              peg$currPos++;
            } else {
              s1 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c59); }
            }
            if (s1 !== null) {
              s2 = peg$parsedigit();
              if (s2 !== null) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsefrac() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c91;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c92); }
      }
      if (s1 !== null) {
        s2 = peg$parsedigits();
        if (s2 !== null) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexp() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsee();
      if (s1 !== null) {
        s2 = peg$parsedigits();
        if (s2 !== null) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedigits() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsedigit();
      if (s1 !== null) {
        while (s1 !== null) {
          s0.push(s1);
          s1 = peg$parsedigit();
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsee() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (peg$c187.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c188); }
      }
      if (s1 !== null) {
        if (peg$c189.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c190); }
        }
        if (s2 === null) {
          s2 = peg$c5;
        }
        if (s2 !== null) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedigit() {
      var s0;

      if (peg$c191.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c192); }
      }

      return s0;
    }

    function peg$parsedigit19() {
      var s0;

      if (peg$c193.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c194); }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;

      s0 = [];
      if (peg$c195.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c196); }
      }
      while (s1 !== null) {
        s0.push(s1);
        if (peg$c195.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c196); }
        }
      }

      return s0;
    }


        var BINARY = {
            "**": "pow",
            "//": "root",
            "%%": "log",
            "*": "mul",
            "/": "div",
            "%": "mod",
            "rem": "rem",
            "+": "add",
            "-": "sub",
            "<": "lt",
            ">": "gt",
            "<=": "le",
            ">=": "ge",
            "==": "equals",
            "<=>": "compare",
            "??": "default",
            "&&": "and",
            "||": "or",
            "<-": "bind",
            "<->": "bind2",
            ":": "assign"
        };

        var UNARY = {
            "+": "number",
            "-": "neg",
            "!": "not",
            "^": "parent"
        };

        var BLOCKS = {
            "map": "mapBlock",
            "filter": "filterBlock",
            "some": "someBlock",
            "every": "everyBlock",
            "sorted": "sortedBlock",
            "group": "groupBlock",
            "groupMap": "groupMapBlock",
            "min": "minBlock",
            "max": "maxBlock"
        };

        var STATEMENTS = {
            ":": "assign",
            "<-": "bind",
            "<->": "bind2"
        };



    peg$result = peg$startRuleFunction();

    if (peg$result !== null && peg$currPos === input.length) {
      return peg$result;
    } else {
      peg$cleanupExpected(peg$maxFailExpected);
      peg$reportedPos = Math.max(peg$currPos, peg$maxFailPos);

      throw new SyntaxError(
        peg$maxFailExpected,
        peg$reportedPos < input.length ? input.charAt(peg$reportedPos) : null,
        peg$reportedPos,
        peg$computePosDetails(peg$reportedPos).line,
        peg$computePosDetails(peg$reportedPos).column
      );
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse      : parse
  };
})();
